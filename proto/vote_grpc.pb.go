// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/vote.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VotingService_CreateBallot_FullMethodName         = "/vote.VotingService/CreateBallot"
	VotingService_SubmitVote_FullMethodName           = "/vote.VotingService/SubmitVote"
	VotingService_CreateTopic_FullMethodName          = "/vote.VotingService/CreateTopic"
	VotingService_GetTopicInfo_FullMethodName         = "/vote.VotingService/GetTopicInfo"
	VotingService_FetchAllActiveTopics_FullMethodName = "/vote.VotingService/FetchAllActiveTopics"
	VotingService_FetchAllTopics_FullMethodName       = "/vote.VotingService/FetchAllTopics"
)

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingServiceClient interface {
	CreateBallot(ctx context.Context, in *CreateBallotRequest, opts ...grpc.CallOption) (*BallotPair, error)
	SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error)
	GetTopicInfo(ctx context.Context, in *GetTopicInfoRequest, opts ...grpc.CallOption) (*TopicInfo, error)
	FetchAllActiveTopics(ctx context.Context, in *FetchAllActiveTopicsRequest, opts ...grpc.CallOption) (*FetchAllActiveTopicsResponse, error)
	FetchAllTopics(ctx context.Context, in *FetchAllTopicsRequest, opts ...grpc.CallOption) (*FetchAllTopicsResponse, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) CreateBallot(ctx context.Context, in *CreateBallotRequest, opts ...grpc.CallOption) (*BallotPair, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BallotPair)
	err := c.cc.Invoke(ctx, VotingService_CreateBallot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, VotingService_SubmitVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*CreateTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTopicResponse)
	err := c.cc.Invoke(ctx, VotingService_CreateTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) GetTopicInfo(ctx context.Context, in *GetTopicInfoRequest, opts ...grpc.CallOption) (*TopicInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicInfo)
	err := c.cc.Invoke(ctx, VotingService_GetTopicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) FetchAllActiveTopics(ctx context.Context, in *FetchAllActiveTopicsRequest, opts ...grpc.CallOption) (*FetchAllActiveTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAllActiveTopicsResponse)
	err := c.cc.Invoke(ctx, VotingService_FetchAllActiveTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) FetchAllTopics(ctx context.Context, in *FetchAllTopicsRequest, opts ...grpc.CallOption) (*FetchAllTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchAllTopicsResponse)
	err := c.cc.Invoke(ctx, VotingService_FetchAllTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServiceServer is the server API for VotingService service.
// All implementations must embed UnimplementedVotingServiceServer
// for forward compatibility.
type VotingServiceServer interface {
	CreateBallot(context.Context, *CreateBallotRequest) (*BallotPair, error)
	SubmitVote(context.Context, *SubmitVoteRequest) (*TransactionResponse, error)
	CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error)
	GetTopicInfo(context.Context, *GetTopicInfoRequest) (*TopicInfo, error)
	FetchAllActiveTopics(context.Context, *FetchAllActiveTopicsRequest) (*FetchAllActiveTopicsResponse, error)
	FetchAllTopics(context.Context, *FetchAllTopicsRequest) (*FetchAllTopicsResponse, error)
	mustEmbedUnimplementedVotingServiceServer()
}

// UnimplementedVotingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVotingServiceServer struct{}

func (UnimplementedVotingServiceServer) CreateBallot(context.Context, *CreateBallotRequest) (*BallotPair, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBallot not implemented")
}
func (UnimplementedVotingServiceServer) SubmitVote(context.Context, *SubmitVoteRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVote not implemented")
}
func (UnimplementedVotingServiceServer) CreateTopic(context.Context, *CreateTopicRequest) (*CreateTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (UnimplementedVotingServiceServer) GetTopicInfo(context.Context, *GetTopicInfoRequest) (*TopicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInfo not implemented")
}
func (UnimplementedVotingServiceServer) FetchAllActiveTopics(context.Context, *FetchAllActiveTopicsRequest) (*FetchAllActiveTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllActiveTopics not implemented")
}
func (UnimplementedVotingServiceServer) FetchAllTopics(context.Context, *FetchAllTopicsRequest) (*FetchAllTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAllTopics not implemented")
}
func (UnimplementedVotingServiceServer) mustEmbedUnimplementedVotingServiceServer() {}
func (UnimplementedVotingServiceServer) testEmbeddedByValue()                       {}

// UnsafeVotingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServiceServer will
// result in compilation errors.
type UnsafeVotingServiceServer interface {
	mustEmbedUnimplementedVotingServiceServer()
}

func RegisterVotingServiceServer(s grpc.ServiceRegistrar, srv VotingServiceServer) {
	// If the following call pancis, it indicates UnimplementedVotingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VotingService_ServiceDesc, srv)
}

func _VotingService_CreateBallot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBallotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).CreateBallot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_CreateBallot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).CreateBallot(ctx, req.(*CreateBallotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_SubmitVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).SubmitVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_SubmitVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).SubmitVote(ctx, req.(*SubmitVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_CreateTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_GetTopicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).GetTopicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_GetTopicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).GetTopicInfo(ctx, req.(*GetTopicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_FetchAllActiveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAllActiveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).FetchAllActiveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_FetchAllActiveTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).FetchAllActiveTopics(ctx, req.(*FetchAllActiveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_FetchAllTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAllTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).FetchAllTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VotingService_FetchAllTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).FetchAllTopics(ctx, req.(*FetchAllTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingService_ServiceDesc is the grpc.ServiceDesc for VotingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vote.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBallot",
			Handler:    _VotingService_CreateBallot_Handler,
		},
		{
			MethodName: "SubmitVote",
			Handler:    _VotingService_SubmitVote_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _VotingService_CreateTopic_Handler,
		},
		{
			MethodName: "GetTopicInfo",
			Handler:    _VotingService_GetTopicInfo_Handler,
		},
		{
			MethodName: "FetchAllActiveTopics",
			Handler:    _VotingService_FetchAllActiveTopics_Handler,
		},
		{
			MethodName: "FetchAllTopics",
			Handler:    _VotingService_FetchAllTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vote.proto",
}
