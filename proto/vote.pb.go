// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/vote.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BallotStatus int32

const (
	BallotStatus_CREATED   BallotStatus = 0 // 投票已创建
	BallotStatus_PROCESSED BallotStatus = 1 // 投票已处理
	BallotStatus_DISCARDED BallotStatus = 2 // 投票已废弃
	BallotStatus_INVALID   BallotStatus = 3 // 投票无效
)

// Enum value maps for BallotStatus.
var (
	BallotStatus_name = map[int32]string{
		0: "CREATED",
		1: "PROCESSED",
		2: "DISCARDED",
		3: "INVALID",
	}
	BallotStatus_value = map[string]int32{
		"CREATED":   0,
		"PROCESSED": 1,
		"DISCARDED": 2,
		"INVALID":   3,
	}
)

func (x BallotStatus) Enum() *BallotStatus {
	p := new(BallotStatus)
	*p = x
	return p
}

func (x BallotStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BallotStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_vote_proto_enumTypes[0].Descriptor()
}

func (BallotStatus) Type() protoreflect.EnumType {
	return &file_proto_vote_proto_enumTypes[0]
}

func (x BallotStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BallotStatus.Descriptor instead.
func (BallotStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{0}
}

type TopicType int32

const (
	TopicType_SIX_STAR_CHARACTER TopicType = 0 // 六星角色
	TopicType_ANY_STAR_CHARACTER TopicType = 1 // 任意星角色
	TopicType_COLLECTION         TopicType = 2 // 收藏
	TopicType_CUSTOM             TopicType = 3 // 自定义
)

// Enum value maps for TopicType.
var (
	TopicType_name = map[int32]string{
		0: "SIX_STAR_CHARACTER",
		1: "ANY_STAR_CHARACTER",
		2: "COLLECTION",
		3: "CUSTOM",
	}
	TopicType_value = map[string]int32{
		"SIX_STAR_CHARACTER": 0,
		"ANY_STAR_CHARACTER": 1,
		"COLLECTION":         2,
		"CUSTOM":             3,
	}
)

func (x TopicType) Enum() *TopicType {
	p := new(TopicType)
	*p = x
	return p
}

func (x TopicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_vote_proto_enumTypes[1].Descriptor()
}

func (TopicType) Type() protoreflect.EnumType {
	return &file_proto_vote_proto_enumTypes[1]
}

func (x TopicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicType.Descriptor instead.
func (TopicType) EnumDescriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{1}
}

type TopicStatus int32

const (
	TopicStatus_AUDIT   TopicStatus = 0 // 审核中
	TopicStatus_NORMAL  TopicStatus = 1 // 正常
	TopicStatus_DELETED TopicStatus = 2 // 已删除
	TopicStatus_ENDED   TopicStatus = 3 // 已结束
)

// Enum value maps for TopicStatus.
var (
	TopicStatus_name = map[int32]string{
		0: "AUDIT",
		1: "NORMAL",
		2: "DELETED",
		3: "ENDED",
	}
	TopicStatus_value = map[string]int32{
		"AUDIT":   0,
		"NORMAL":  1,
		"DELETED": 2,
		"ENDED":   3,
	}
)

func (x TopicStatus) Enum() *TopicStatus {
	p := new(TopicStatus)
	*p = x
	return p
}

func (x TopicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_vote_proto_enumTypes[2].Descriptor()
}

func (TopicStatus) Type() protoreflect.EnumType {
	return &file_proto_vote_proto_enumTypes[2]
}

func (x TopicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicStatus.Descriptor instead.
func (TopicStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{2}
}

type Identity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fingerprint   string                 `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`            // 浏览器指纹
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`                              // ip
	IsMobile      bool                   `protobuf:"varint,3,opt,name=is_mobile,json=isMobile,proto3" json:"is_mobile,omitempty"` // 是否是移动设备
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Identity) Reset() {
	*x = Identity{}
	mi := &file_proto_vote_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{0}
}

func (x *Identity) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *Identity) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Identity) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

type BallotInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TopicId        int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                             // 投票主题id
	Topic          string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                                                 // 投票主题
	BallotCode     int64                  `protobuf:"varint,3,opt,name=ballot_code,json=ballotCode,proto3" json:"ballot_code,omitempty"`                    // snowflake id
	Identity       *Identity              `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`                                           // 投票者身份
	Status         BallotStatus           `protobuf:"varint,5,opt,name=status,proto3,enum=vote.BallotStatus" json:"status,omitempty"`                       // 投票状态
	Options        []int32                `protobuf:"varint,6,rep,packed,name=options,proto3" json:"options,omitempty"`                                     // 候选项
	SelectedOption []int32                `protobuf:"varint,7,rep,packed,name=selected_option,json=selectedOption,proto3" json:"selected_option,omitempty"` // 选中项
	ExcludedOption []int32                `protobuf:"varint,8,rep,packed,name=excluded_option,json=excludedOption,proto3" json:"excluded_option,omitempty"` // 排除项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BallotInfo) Reset() {
	*x = BallotInfo{}
	mi := &file_proto_vote_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotInfo) ProtoMessage() {}

func (x *BallotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotInfo.ProtoReflect.Descriptor instead.
func (*BallotInfo) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{1}
}

func (x *BallotInfo) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *BallotInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *BallotInfo) GetBallotCode() int64 {
	if x != nil {
		return x.BallotCode
	}
	return 0
}

func (x *BallotInfo) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *BallotInfo) GetStatus() BallotStatus {
	if x != nil {
		return x.Status
	}
	return BallotStatus_CREATED
}

func (x *BallotInfo) GetOptions() []int32 {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BallotInfo) GetSelectedOption() []int32 {
	if x != nil {
		return x.SelectedOption
	}
	return nil
}

func (x *BallotInfo) GetExcludedOption() []int32 {
	if x != nil {
		return x.ExcludedOption
	}
	return nil
}

type CreateBallotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`       // 投票主题
	Identity      *Identity              `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"` // 投票者身份
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateBallotRequest) Reset() {
	*x = CreateBallotRequest{}
	mi := &file_proto_vote_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBallotRequest) ProtoMessage() {}

func (x *CreateBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBallotRequest.ProtoReflect.Descriptor instead.
func (*CreateBallotRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBallotRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CreateBallotRequest) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

type BallotPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicId       int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`          // 投票主题id
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                              // 投票主题
	BallotCode    int64                  `protobuf:"varint,3,opt,name=ballot_code,json=ballotCode,proto3" json:"ballot_code,omitempty"` // snowflake id
	Options       []int32                `protobuf:"varint,4,rep,packed,name=options,proto3" json:"options,omitempty"`                  // 候选项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BallotPair) Reset() {
	*x = BallotPair{}
	mi := &file_proto_vote_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BallotPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallotPair) ProtoMessage() {}

func (x *BallotPair) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallotPair.ProtoReflect.Descriptor instead.
func (*BallotPair) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{3}
}

func (x *BallotPair) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *BallotPair) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *BallotPair) GetBallotCode() int64 {
	if x != nil {
		return x.BallotCode
	}
	return 0
}

func (x *BallotPair) GetOptions() []int32 {
	if x != nil {
		return x.Options
	}
	return nil
}

type SubmitVoteRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TopicId        int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                             // 投票主题id
	Topic          string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                                                 // 投票主题
	Identity       *Identity              `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`                                           // 投票者身份
	BallotCode     int64                  `protobuf:"varint,4,opt,name=ballot_code,json=ballotCode,proto3" json:"ballot_code,omitempty"`                    // snowflake id
	SelectedOption []int32                `protobuf:"varint,5,rep,packed,name=selected_option,json=selectedOption,proto3" json:"selected_option,omitempty"` // 选中项
	ExcludedOption []int32                `protobuf:"varint,6,rep,packed,name=excluded_option,json=excludedOption,proto3" json:"excluded_option,omitempty"` // 排除项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitVoteRequest) Reset() {
	*x = SubmitVoteRequest{}
	mi := &file_proto_vote_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitVoteRequest) ProtoMessage() {}

func (x *SubmitVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitVoteRequest.ProtoReflect.Descriptor instead.
func (*SubmitVoteRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitVoteRequest) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *SubmitVoteRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SubmitVoteRequest) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *SubmitVoteRequest) GetBallotCode() int64 {
	if x != nil {
		return x.BallotCode
	}
	return 0
}

func (x *SubmitVoteRequest) GetSelectedOption() []int32 {
	if x != nil {
		return x.SelectedOption
	}
	return nil
}

func (x *SubmitVoteRequest) GetExcludedOption() []int32 {
	if x != nil {
		return x.ExcludedOption
	}
	return nil
}

type DiscardBallotRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicId       int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`          // 投票主题id
	Topic         string                 `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`                              // 投票主题
	Identity      *Identity              `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`                        // 投票者身份
	BallotCode    int64                  `protobuf:"varint,4,opt,name=ballot_code,json=ballotCode,proto3" json:"ballot_code,omitempty"` // 要废弃的投票
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardBallotRequest) Reset() {
	*x = DiscardBallotRequest{}
	mi := &file_proto_vote_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardBallotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardBallotRequest) ProtoMessage() {}

func (x *DiscardBallotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardBallotRequest.ProtoReflect.Descriptor instead.
func (*DiscardBallotRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{5}
}

func (x *DiscardBallotRequest) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *DiscardBallotRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *DiscardBallotRequest) GetIdentity() *Identity {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *DiscardBallotRequest) GetBallotCode() int64 {
	if x != nil {
		return x.BallotCode
	}
	return 0
}

type TransactionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Acknowledged  bool                   `protobuf:"varint,1,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`                    // 操作是否被确认
	StatusCode    int32                  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`      // 状态代码
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionResponse) Reset() {
	*x = TransactionResponse{}
	mi := &file_proto_vote_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResponse) ProtoMessage() {}

func (x *TransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResponse.ProtoReflect.Descriptor instead.
func (*TransactionResponse) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionResponse) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

func (x *TransactionResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *TransactionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type CreateTopicRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 投票主题
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                                 // 投票描述
	TopicType     TopicType              `protobuf:"varint,3,opt,name=topic_type,json=topicType,proto3,enum=vote.TopicType" json:"topic_type,omitempty"`                               // 投票类型
	Styles        map[string]string      `protobuf:"bytes,4,rep,name=styles,proto3" json:"styles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 投票样式
	StartAt       int64                  `protobuf:"varint,5,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`                                                         // 投票开始时间
	FinishAt      int64                  `protobuf:"varint,6,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty"`                                                      // 投票结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	mi := &file_proto_vote_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTopicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTopicRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTopicRequest) GetTopicType() TopicType {
	if x != nil {
		return x.TopicType
	}
	return TopicType_SIX_STAR_CHARACTER
}

func (x *CreateTopicRequest) GetStyles() map[string]string {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *CreateTopicRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateTopicRequest) GetFinishAt() int64 {
	if x != nil {
		return x.FinishAt
	}
	return 0
}

type CreateTopicResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicId       int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`               // 投票主题id
	Status        TopicStatus            `protobuf:"varint,2,opt,name=status,proto3,enum=vote.TopicStatus" json:"status,omitempty"`          // 投票状态
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTopicResponse) Reset() {
	*x = CreateTopicResponse{}
	mi := &file_proto_vote_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicResponse) ProtoMessage() {}

func (x *CreateTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicResponse.ProtoReflect.Descriptor instead.
func (*CreateTopicResponse) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTopicResponse) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *CreateTopicResponse) GetStatus() TopicStatus {
	if x != nil {
		return x.Status
	}
	return TopicStatus_AUDIT
}

func (x *CreateTopicResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type GetTopicInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"` // 投票主题
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopicInfoRequest) Reset() {
	*x = GetTopicInfoRequest{}
	mi := &file_proto_vote_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopicInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicInfoRequest) ProtoMessage() {}

func (x *GetTopicInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTopicInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{9}
}

func (x *GetTopicInfoRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type TopicInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TopicId       int32                  `protobuf:"varint,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`                                                         // 投票主题id
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 投票主题
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                 // 投票描述
	TopicType     TopicType              `protobuf:"varint,4,opt,name=topic_type,json=topicType,proto3,enum=vote.TopicType" json:"topic_type,omitempty"`                               // 投票类型
	Styles        map[string]string      `protobuf:"bytes,5,rep,name=styles,proto3" json:"styles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 投票样式
	Status        TopicStatus            `protobuf:"varint,6,opt,name=status,proto3,enum=vote.TopicStatus" json:"status,omitempty"`                                                    // 投票状态
	StartAt       int64                  `protobuf:"varint,7,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`                                                         // 投票开始时间
	FinishAt      int64                  `protobuf:"varint,8,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty"`                                                      // 投票结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicInfo) Reset() {
	*x = TopicInfo{}
	mi := &file_proto_vote_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicInfo) ProtoMessage() {}

func (x *TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicInfo.ProtoReflect.Descriptor instead.
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{10}
}

func (x *TopicInfo) GetTopicId() int32 {
	if x != nil {
		return x.TopicId
	}
	return 0
}

func (x *TopicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopicInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TopicInfo) GetTopicType() TopicType {
	if x != nil {
		return x.TopicType
	}
	return TopicType_SIX_STAR_CHARACTER
}

func (x *TopicInfo) GetStyles() map[string]string {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *TopicInfo) GetStatus() TopicStatus {
	if x != nil {
		return x.Status
	}
	return TopicStatus_AUDIT
}

func (x *TopicInfo) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *TopicInfo) GetFinishAt() int64 {
	if x != nil {
		return x.FinishAt
	}
	return 0
}

type FetchAllActiveTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAllActiveTopicsRequest) Reset() {
	*x = FetchAllActiveTopicsRequest{}
	mi := &file_proto_vote_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllActiveTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllActiveTopicsRequest) ProtoMessage() {}

func (x *FetchAllActiveTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllActiveTopicsRequest.ProtoReflect.Descriptor instead.
func (*FetchAllActiveTopicsRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{11}
}

type FetchAllActiveTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*TopicInfo           `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAllActiveTopicsResponse) Reset() {
	*x = FetchAllActiveTopicsResponse{}
	mi := &file_proto_vote_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllActiveTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllActiveTopicsResponse) ProtoMessage() {}

func (x *FetchAllActiveTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllActiveTopicsResponse.ProtoReflect.Descriptor instead.
func (*FetchAllActiveTopicsResponse) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{12}
}

func (x *FetchAllActiveTopicsResponse) GetTopics() []*TopicInfo {
	if x != nil {
		return x.Topics
	}
	return nil
}

type FetchAllTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAllTopicsRequest) Reset() {
	*x = FetchAllTopicsRequest{}
	mi := &file_proto_vote_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllTopicsRequest) ProtoMessage() {}

func (x *FetchAllTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllTopicsRequest.ProtoReflect.Descriptor instead.
func (*FetchAllTopicsRequest) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{13}
}

type FetchAllTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*TopicInfo           `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchAllTopicsResponse) Reset() {
	*x = FetchAllTopicsResponse{}
	mi := &file_proto_vote_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchAllTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllTopicsResponse) ProtoMessage() {}

func (x *FetchAllTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vote_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllTopicsResponse.ProtoReflect.Descriptor instead.
func (*FetchAllTopicsResponse) Descriptor() ([]byte, []int) {
	return file_proto_vote_proto_rawDescGZIP(), []int{14}
}

func (x *FetchAllTopicsResponse) GetTopics() []*TopicInfo {
	if x != nil {
		return x.Topics
	}
	return nil
}

var File_proto_vote_proto protoreflect.FileDescriptor

var file_proto_vote_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x59, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0x78, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x6c, 0x6f,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x61,
	0x6c, 0x6c, 0x6f, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7f, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x1a, 0x39, 0x0a, 0x0b,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xdf, 0x02, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x74, 0x1a, 0x39,
	0x0a, 0x0b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x22, 0x17, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2a, 0x46, 0x0a,
	0x0c, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x57, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x43,
	0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0x3c,
	0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x55, 0x44, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x32, 0xba, 0x03, 0x0a,
	0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x19,
	0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x40, 0x0a, 0x0a, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x65,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x2e, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x76,
	0x6f, 0x74, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a,
	0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1b,
	0x2e, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x6f,
	0x74, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
})

var (
	file_proto_vote_proto_rawDescOnce sync.Once
	file_proto_vote_proto_rawDescData []byte
)

func file_proto_vote_proto_rawDescGZIP() []byte {
	file_proto_vote_proto_rawDescOnce.Do(func() {
		file_proto_vote_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_vote_proto_rawDesc), len(file_proto_vote_proto_rawDesc)))
	})
	return file_proto_vote_proto_rawDescData
}

var file_proto_vote_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_vote_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_vote_proto_goTypes = []any{
	(BallotStatus)(0),                    // 0: vote.BallotStatus
	(TopicType)(0),                       // 1: vote.TopicType
	(TopicStatus)(0),                     // 2: vote.TopicStatus
	(*Identity)(nil),                     // 3: vote.Identity
	(*BallotInfo)(nil),                   // 4: vote.BallotInfo
	(*CreateBallotRequest)(nil),          // 5: vote.CreateBallotRequest
	(*BallotPair)(nil),                   // 6: vote.BallotPair
	(*SubmitVoteRequest)(nil),            // 7: vote.SubmitVoteRequest
	(*DiscardBallotRequest)(nil),         // 8: vote.DiscardBallotRequest
	(*TransactionResponse)(nil),          // 9: vote.TransactionResponse
	(*CreateTopicRequest)(nil),           // 10: vote.CreateTopicRequest
	(*CreateTopicResponse)(nil),          // 11: vote.CreateTopicResponse
	(*GetTopicInfoRequest)(nil),          // 12: vote.GetTopicInfoRequest
	(*TopicInfo)(nil),                    // 13: vote.TopicInfo
	(*FetchAllActiveTopicsRequest)(nil),  // 14: vote.FetchAllActiveTopicsRequest
	(*FetchAllActiveTopicsResponse)(nil), // 15: vote.FetchAllActiveTopicsResponse
	(*FetchAllTopicsRequest)(nil),        // 16: vote.FetchAllTopicsRequest
	(*FetchAllTopicsResponse)(nil),       // 17: vote.FetchAllTopicsResponse
	nil,                                  // 18: vote.CreateTopicRequest.StylesEntry
	nil,                                  // 19: vote.TopicInfo.StylesEntry
}
var file_proto_vote_proto_depIdxs = []int32{
	3,  // 0: vote.BallotInfo.identity:type_name -> vote.Identity
	0,  // 1: vote.BallotInfo.status:type_name -> vote.BallotStatus
	3,  // 2: vote.CreateBallotRequest.identity:type_name -> vote.Identity
	3,  // 3: vote.SubmitVoteRequest.identity:type_name -> vote.Identity
	3,  // 4: vote.DiscardBallotRequest.identity:type_name -> vote.Identity
	1,  // 5: vote.CreateTopicRequest.topic_type:type_name -> vote.TopicType
	18, // 6: vote.CreateTopicRequest.styles:type_name -> vote.CreateTopicRequest.StylesEntry
	2,  // 7: vote.CreateTopicResponse.status:type_name -> vote.TopicStatus
	1,  // 8: vote.TopicInfo.topic_type:type_name -> vote.TopicType
	19, // 9: vote.TopicInfo.styles:type_name -> vote.TopicInfo.StylesEntry
	2,  // 10: vote.TopicInfo.status:type_name -> vote.TopicStatus
	13, // 11: vote.FetchAllActiveTopicsResponse.topics:type_name -> vote.TopicInfo
	13, // 12: vote.FetchAllTopicsResponse.topics:type_name -> vote.TopicInfo
	5,  // 13: vote.VotingService.CreateBallot:input_type -> vote.CreateBallotRequest
	7,  // 14: vote.VotingService.SubmitVote:input_type -> vote.SubmitVoteRequest
	10, // 15: vote.VotingService.CreateTopic:input_type -> vote.CreateTopicRequest
	12, // 16: vote.VotingService.GetTopicInfo:input_type -> vote.GetTopicInfoRequest
	14, // 17: vote.VotingService.FetchAllActiveTopics:input_type -> vote.FetchAllActiveTopicsRequest
	16, // 18: vote.VotingService.FetchAllTopics:input_type -> vote.FetchAllTopicsRequest
	6,  // 19: vote.VotingService.CreateBallot:output_type -> vote.BallotPair
	9,  // 20: vote.VotingService.SubmitVote:output_type -> vote.TransactionResponse
	11, // 21: vote.VotingService.CreateTopic:output_type -> vote.CreateTopicResponse
	13, // 22: vote.VotingService.GetTopicInfo:output_type -> vote.TopicInfo
	15, // 23: vote.VotingService.FetchAllActiveTopics:output_type -> vote.FetchAllActiveTopicsResponse
	17, // 24: vote.VotingService.FetchAllTopics:output_type -> vote.FetchAllTopicsResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_vote_proto_init() }
func file_proto_vote_proto_init() {
	if File_proto_vote_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_vote_proto_rawDesc), len(file_proto_vote_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_vote_proto_goTypes,
		DependencyIndexes: file_proto_vote_proto_depIdxs,
		EnumInfos:         file_proto_vote_proto_enumTypes,
		MessageInfos:      file_proto_vote_proto_msgTypes,
	}.Build()
	File_proto_vote_proto = out.File
	file_proto_vote_proto_goTypes = nil
	file_proto_vote_proto_depIdxs = nil
}
